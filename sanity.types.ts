/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Blog = {
  _id: string;
  _type: "blog";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  titleImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  smallDescription?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  publishedAt?: string;
  relatedProducts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "product";
  }>;
  tags?: Array<string>;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  intro?: string;
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "new" | "new" | "sale";
  variant?: "coats" | "kaftan" | "casualwear" | "agbada" | "others";
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Blog | Product | Category | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/helpers/queries.tsx
// Variable: PRODUCTS_QUERY
// Query: *[_type == "product"] | order(_createdAt desc) {      _id,      name,      "slug": slug.current, // âœ… This ensures we get the string value      _updatedAt,      _createdAt    }
export type PRODUCTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: string | null;
  _updatedAt: string;
  _createdAt: string;
}>;
// Variable: PRODUCT_BY_SLUG_QUERY
// Query: *[_type == 'product' && slug.current == $slug] | order(name asc) [0]
export type PRODUCT_BY_SLUG_QUERYResult = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  intro?: string;
  description?: string;
  price?: number;
  discount?: number;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  stock?: number;
  status?: "new" | "sale";
  variant?: "agbada" | "casualwear" | "coats" | "kaftan" | "others";
} | null;
// Variable: CATEGORIES_QUERY
// Query: *[_type=="category"] | order(name desc)
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;
// Variable: BLOGS_QUERY
// Query: *[_type == "blog"] | order(publishedAt desc) {      _id,      title,      slug,      titleImage,      smallDescription,      publishedAt,      tags,      relatedProducts[]->{        _id,        title      }    }
export type BLOGS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  titleImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  smallDescription: string | null;
  publishedAt: string | null;
  tags: Array<string> | null;
  relatedProducts: Array<{
    _id: string;
    title: null;
  }> | null;
}>;
// Variable: BLOG_BY_SLUG_QUERY
// Query: *[_type == "blog" && slug.current == $slug][0]{      _id,      title,      slug,      titleImage {        asset -> {          url,          metadata {            dimensions          }        },        alt,        hotspot,        crop      },      smallDescription,      content,      publishedAt,      tags    }
export type BLOG_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  titleImage: {
    asset: {
      url: string | null;
      metadata: {
        dimensions: SanityImageDimensions | null;
      } | null;
    } | null;
    alt: string | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
  smallDescription: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  publishedAt: string | null;
  tags: Array<string> | null;
} | null;
// Variable: ORDER_BY_ID_QUERY
// Query: *[_type == 'order' && orderId == $orderId][0]{      _id,      orderId,      clerkUserId,      customerEmail,      customerName,      items[]{        product->{          _id,          name,          slug,          price,          images        },        quantity,        price,        name,        image      },      totalAmount,      status,      paymentStatus,      paystackReference,      paystackTransactionId,      shippingAddress,      orderDate,      paidAt    }
export type ORDER_BY_ID_QUERYResult = null;
// Variable: ORDERS_BY_EMAIL_QUERY
// Query: *[_type == 'order' && customerEmail == $email] | order(orderDate desc){      _id,      orderId,      clerkUserId,      customerEmail,      customerName,      items[]{        product->{          _id,          name,          slug,          price,          images        },        quantity,        price,        name,        image      },      totalAmount,      status,      paymentStatus,      paystackReference,      shippingAddress,      orderDate,      paidAt    }
export type ORDERS_BY_EMAIL_QUERYResult = Array<never>;
// Variable: ORDERS_BY_CLERK_USER_ID_QUERY
// Query: *[_type == 'order' && clerkUserId == $clerkUserId] | order(orderDate desc){      _id,      orderId,      clerkUserId,      customerEmail,      customerName,      items[]{        product->{          _id,          name,          slug,          price,          images        },        quantity,        price,        name,        image      },      totalAmount,      status,      paymentStatus,      paystackReference,      shippingAddress,      orderDate,      paidAt    }
export type ORDERS_BY_CLERK_USER_ID_QUERYResult = Array<never>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"product\"] | order(_createdAt desc) {\n      _id,\n      name,\n      \"slug\": slug.current, // \u2705 This ensures we get the string value\n      _updatedAt,\n      _createdAt\n    }": PRODUCTS_QUERYResult;
    "*[_type == 'product' && slug.current == $slug] | order(name asc) [0]": PRODUCT_BY_SLUG_QUERYResult;
    "*[_type==\"category\"] | order(name desc)": CATEGORIES_QUERYResult;
    "*[_type == \"blog\"] | order(publishedAt desc) {\n      _id,\n      title,\n      slug,\n      titleImage,\n      smallDescription,\n      publishedAt,\n      tags,\n      relatedProducts[]->{\n        _id,\n        title\n      }\n    }": BLOGS_QUERYResult;
    "*[_type == \"blog\" && slug.current == $slug][0]{\n      _id,\n      title,\n      slug,\n      titleImage {\n        asset -> {\n          url,\n          metadata {\n            dimensions\n          }\n        },\n        alt,\n        hotspot,\n        crop\n      },\n      smallDescription,\n      content,\n      publishedAt,\n      tags\n    }": BLOG_BY_SLUG_QUERYResult;
    "*[_type == 'order' && orderId == $orderId][0]{\n      _id,\n      orderId,\n      clerkUserId,\n      customerEmail,\n      customerName,\n      items[]{\n        product->{\n          _id,\n          name,\n          slug,\n          price,\n          images\n        },\n        quantity,\n        price,\n        name,\n        image\n      },\n      totalAmount,\n      status,\n      paymentStatus,\n      paystackReference,\n      paystackTransactionId,\n      shippingAddress,\n      orderDate,\n      paidAt\n    }": ORDER_BY_ID_QUERYResult;
    "*[_type == 'order' && customerEmail == $email] | order(orderDate desc){\n      _id,\n      orderId,\n      clerkUserId,\n      customerEmail,\n      customerName,\n      items[]{\n        product->{\n          _id,\n          name,\n          slug,\n          price,\n          images\n        },\n        quantity,\n        price,\n        name,\n        image\n      },\n      totalAmount,\n      status,\n      paymentStatus,\n      paystackReference,\n      shippingAddress,\n      orderDate,\n      paidAt\n    }": ORDERS_BY_EMAIL_QUERYResult;
    "*[_type == 'order' && clerkUserId == $clerkUserId] | order(orderDate desc){\n      _id,\n      orderId,\n      clerkUserId,\n      customerEmail,\n      customerName,\n      items[]{\n        product->{\n          _id,\n          name,\n          slug,\n          price,\n          images\n        },\n        quantity,\n        price,\n        name,\n        image\n      },\n      totalAmount,\n      status,\n      paymentStatus,\n      paystackReference,\n      shippingAddress,\n      orderDate,\n      paidAt\n    }": ORDERS_BY_CLERK_USER_ID_QUERYResult;
  }
}
